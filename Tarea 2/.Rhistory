data<-read.csv("dataTrain.csv")
View(data)
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
test<-read.csv("dataEval.csv")
View(test)
#Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col].order
order(apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col])
apply(X=is.na(data),MARGIN=2,FUN =sum)[order(valores_col)]
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(valores_col)]
clean
\clean
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(valores_col)]
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(valores_col)]
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(-valores_col)]
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>=0
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(valores_col)]
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>=0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>=0
apply(X=is.na(test),MARGIN=2,FUN =sum)[order(valores_col)]
valores_col
order(apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col])
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
## Viendo nulos de Train: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
a
a[1]
a.names()
names(a)
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]>37500
names(a)
a<-
Eval_nulos<-names(apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]>37500)
## Viendo nulos de Train: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
Col_Train_nulos<-names(apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]>99500)
Col_Train_nulos
Col_Train_nulos<-names(apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]>99500)
Col_Train_nulos
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]>37500
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valore_col]
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
Col_Eval_nulos<-names(a[a>37500])
Col_Eval_nulos
a
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
Col_Train_nulos<-names(b[b>99500])
Col_Train_nulos
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
a
Col_Eval_nulos<-names(a[a>37500])
Col_Eval_nulos
apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]>37500
## Viendo nulos de Train: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
Col_Train_nulos<-names(b[b>99500])
Col_Train_nulos
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
a
Col_Eval_nulos<-names(a[a>37500])
Col_Eval_nulos
## Viendo nulos de Train: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
Col_Train_nulos<-names(b[b>99500])
Col_Train_nulos
data<-data[-["G","GM","BV","UB","IR"]]
data<-data[-c("G","GM","BV","UB","IR")]
data<-data[!c("G","GM","BV","UB","IR")]
data<-data[select(-c("G","GM","BV","UB","IR"))]
install.packages("devtools")
data<-data[select(-c("G","GM","BV","UB","IR"))]
library(EDAWR)
install.packages("devtools","EDWAR")
library(devtools)
data<-data[select(-c("G","GM","BV","UB","IR"))]
select(-c("G","GM","BV","UB","IR")
select(-c("G","GM","BV","UB","IR"))
select(-c("G","GM","BV","UB","IR"))
for (i in Col_Train_nulos){
data$i<-NULL
}
for (i in Col_Train_nulos){
data$i<-NULL
}
data
data$i
print(i)
for (i in Col_Train_nulos){
print(i)
data$i<-NULL
}
data$G<-NULL
data$GM<-NULL
data$BV<-NULL
data$UB<-NULL
data$IR<-NULL
Tuplas_na #Todas las tuplas tienen nulos
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
#Siguen habiendo 99970 tuplas con nulos.
str(data)
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
install.packages("devtools")
pacman::p_load(psych,ggplot2,tidyverse,proxy,dplyr)
data<-read.csv("dataTrain.csv")
test<-read.csv("dataEval.csv")
## Viendo nulos de Eval: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(test),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(test),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(test),MARGIN=2,FUN =sum)>0
a<-apply(X=is.na(test),MARGIN=2,FUN =sum)[valores_col]
a
Col_Eval_nulos<-names(a[a>37500])
Col_Eval_nulos
## Viendo nulos de Train: ####
#Tuplas con nulos:
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na #Todas las tuplas tienen nulos
#columnas con nulos:
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#columnas con su respectivo numero de nulos
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
b<-apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
b
Col_Train_nulos<-names(b[b>99500])
Col_Train_nulos
#Elimnamos las columnas con mayor cantidad de nulos.
data$G<-NULL
data$GM<-NULL
data$BV<-NULL
data$UB<-NULL
data$IR<-NULL
#Siguen habiendo 99970 tuplas con nulos.
str(data)
#Variable a predecir:
summary(data["diameter"])
hist(data["diameter"])
hist(x=data$diameter)
?hist
boxplot(x=data$diameter)
#Variable a predecir:
summary(data["diameter"])
hist(x=test$diameter)
hist(x=data$diameter)
boxplot(x=data$diameter)
algo<-data[data["diameter"]>200]
algo
algo<-data$diameter[data["diameter"]>200]
algo<-data$diameter[data["diameter"]>100]
algo<-data$diameter[data["diameter"]>90]
algo<-data$diameter[data["diameter"]>30]
algo<-data$diameter[data["diameter"]>20]
algo<-data$diameter[data["diameter"]>10]
algo<-data$diameter[data["diameter"]>5]
algo<-data$diameter[data["diameter"]>200]
# Analisis Descriptivo ####
str(data)
#Variable a predecir:
summary(data["diameter"])
