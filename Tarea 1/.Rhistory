coefSil <- silhouette(clusters,dist(data))
coefSil
#### Dbs Scan######
sprintf("Metodo de clasificacion:", models[5])
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_final[1:35])
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[5], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
modelo1
?dbscan
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
####Correlaciones y sillohuete promedio distintos modelos###
cor_s<-c()
sil_s<-c()
cor_xy<-c()
sil_xy<-c()
for(i in 1:4){
cat("###############","Metodo de clasificacion:", models[i],"#########################")
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_final[1:35])
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[i], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
cor_s<-cbind(cor_s,eval[1])
sil_s<-cbind(sil_s,eval[2])
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[i], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
#UMAP CON CLUSTER POR XY.
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo2$cluster))) +
theme()
cor_xy<-cbind(cor_xy,eval[1])
sil_xy<-cbind(sil_xy,eval[2])
}
resultados<-rbind(models[1:4],cor_s,sil_s,cor_xy,sil_xy)
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
###Correlaciones y sillohuete promedio distintos modelos###
cor_s<-c()
sil_s<-c()
cor_xy<-c()
sil_xy<-c()
for(i in 1:4){
cat("###############","Metodo de clasificacion:", models[i],"#########################")
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_final[1:35])
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[i], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
cor_s<-cbind(cor_s,eval[1])
sil_s<-cbind(sil_s,eval[2])
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[i], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
#UMAP CON CLUSTER POR XY.
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo2$cluster))) +
theme()
cor_xy<-cbind(cor_xy,eval[1])
sil_xy<-cbind(sil_xy,eval[2])
}
resultados<-rbind(models[1:4],cor_s,sil_s,cor_xy,sil_xy)
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
?mclust
cat("Metodo de clasificacion:", models[3])
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_final[1:35])
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[3], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
eval
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[3], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
eval
cat("Metodo de clasificacion:", models[3])
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_final[1:35])
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[3], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
eval
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[3], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
eval
#UMAP CON CLUSTER POR XY.
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo2$cluster))) +
theme()
pacman::p_load(dplyr,psych,ggplot2,tidyverse,proxy,dplyr,umap, ggdendro, cluster,dbscan)
pacman::p_load(tidyverse, umap, factoextra, flexclust, cluster,magick)
data<-read.csv("datos_t1_centroides.csv",sep=",",header=TRUE)
source("clusteriza.R")
###Analisis de datos nulos.################
sum(is.na(data))
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na
Tuplas_na*100/1661
#12.5 % de las tuplas tienen nulos.
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#11 columnas presentan NA
#True/falso presencia nulos por columna/fila
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
valores_tu<-apply(X=is.na(data),MARGIN=1,FUN =sum)>0
#columnas con su respectivo numero de nulos
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
#Filas con su respectivo indice y n°de nulo
indice_nulos<-cbind(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
valores_1<-apply(X=is.na(data),MARGIN=1,FUN =sum)>1
#se sacan las filas con n°de nulos mayor a 1.
indices_e<-c(row.names(data)[!(valores_1)])
indices_e
#vemos que la cantidad de nulos sobrante es de 28, correspondiente a la columan ise.
#Es mejor eliminar 28 filas, que eliminar esa columna y perder los demás datos.
data2<-data[indices_e,]
apply(X=is.na(data2),MARGIN=2,FUN =sum)
#data_final
data_final<-data[c(row.names(data)[!(valores_tu)]),]
apply(X=is.na(data_final),MARGIN=2,FUN =sum)
###Estadistica Descriptiva.###########
str(data)
count(unique(data_final["ZONA"]))
#Notamos que las variables X1., cod_com, COMUNA, MANZ_EN no aportan valores diferentes.
unique(data["COMUNA"])
unique(data["cod_com"])
unique(data["MANZ_EN"])
#eliminamos X1 por ser los indices y las demás columnas por ser el mismo valor para todos los datos.
data_final$X.1<-NULL
data_final$COMUNA<-NULL
data_final$cod_com<-NULL
data_final$MANZ_EN<-NULL
#Analisis duplicados: No hay filas duplicadas.
sum(duplicated(data_final))
#Analisis de variables
str(data_final)
for(i in c("pearson","kendal","spearman")){
print(i)
muestra<-data_final %>%
select(dim_acc, iav, icul,idep,isal,iser,ise)
print(cor(muestra, method=i)[1,])
muestra1<-data_final %>%
select(dim_amb, iata, icv)
print(cor(muestra1, method=i)[1,])
muestra2<-data_final %>%
select(dim_soc, ivi, isv,iej,irh,iem,ipj)
print(cor(muestra2, method=i)[1,])
muestra3<-data_final %>%
select(dim_seg, igpe, igpr,ilpe,ilpr)
print(cor(muestra3, method=i)[1,])
print("---------------------------------------------------")
}
###Analisis de datos nulos.################
sum(is.na(data))
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na
Tuplas_na*100/1661
#12.5 % de las tuplas tienen nulos.
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#11 columnas presentan NA
#True/falso presencia nulos por columna/fila
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
valores_tu<-apply(X=is.na(data),MARGIN=1,FUN =sum)>0
#columnas con su respectivo numero de nulos
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores_col]
#Filas con su respectivo indice y n°de nulo
indice_nulos<-cbind(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
valores_1<-apply(X=is.na(data),MARGIN=1,FUN =sum)>1
#se sacan las filas con n°de nulos mayor a 1.
indices_e<-c(row.names(data)[!(valores_1)])
indices_e
#vemos que la cantidad de nulos sobrante es de 28, correspondiente a la columan ise.
#Es mejor eliminar 28 filas, que eliminar esa columna y perder los demás datos.
data2<-data[indices_e,]
apply(X=is.na(data2),MARGIN=2,FUN =sum)
#data_final
data_final<-data[c(row.names(data)[!(valores_tu)]),]
apply(X=is.na(data_final),MARGIN=2,FUN =sum)
###Estadistica Descriptiva.###########
str(data)
count(unique(data_final["ZONA"]))
#Notamos que las variables X1., cod_com, COMUNA, MANZ_EN no aportan valores diferentes.
unique(data["COMUNA"])
unique(data["cod_com"])
unique(data["MANZ_EN"])
#eliminamos X1 por ser los indices y las demás columnas por ser el mismo valor para todos los datos.
data_final$X.1<-NULL
data_final$COMUNA<-NULL
data_final$cod_com<-NULL
data_final$MANZ_EN<-NULL
#Analisis duplicados: No hay filas duplicadas.
sum(duplicated(data_final))
#Analisis de variables
str(data_final)
for(i in c("pearson","kendal","spearman")){
print(i)
muestra<-data_final %>%
select(dim_acc, iav, icul,idep,isal,iser,ise)
print(cor(muestra, method=i)[1,])
muestra1<-data_final %>%
select(dim_amb, iata, icv)
print(cor(muestra1, method=i)[1,])
muestra2<-data_final %>%
select(dim_soc, ivi, isv,iej,irh,iem,ipj)
print(cor(muestra2, method=i)[1,])
muestra3<-data_final %>%
select(dim_seg, igpe, igpr,ilpe,ilpr)
print(cor(muestra3, method=i)[1,])
print("---------------------------------------------------")
}
data_pp_xy = data_final[,
c('ID_MANZ', 'ZONA', 'ibt',"dim_acc",
"iav", "idep","isal","ise", 'iata', 'icv', "dim_soc",
"ivi","irh","iem","ipj","dim_seg",'E6A14', 'E15A24',"AREA",
"TOTAL_V" ,"HOG_N","PERSONAS")]
data_pp_xy['E6A24'] = data_final$E6A14 + data_final$E15A24
data_pp_xy[, c('E6A14', 'E15A24')] <- list(NULL)
data_pp_xy<-cbind(data_pp_xy,data_final[36:37])
get_clust_tendency(data_final, n = 40, graph = FALSE)
get_clust_tendency(data_pp_xy, n = 40, graph = FALSE)
get_clust_tendency(data_pp_xy[1:21], n = 40, graph = FALSE)
models <- c("kmeans", "hier", "gmm", "cmeans", "dbscan")
evaluacion_cluster <- function(data, clusters){
coefSil <- silhouette(clusters,dist(data))
cohesiones <- clus_cohes(data, clusters)
separaciones <- clus_sep(data, clusters)
correlacion <- clus_cor(data, clusters)
return(list(correlacion, mean(coefSil[,3]), cohesiones, separaciones))
}
###Correlaciones y sillohuete promedio distintos modelos####
cor_s<-c()
sil_s<-c()
cor_xy<-c()
sil_xy<-c()
#data_model<-data_final[1:35]
data_model<-data_pp_xy[1:21]
for(i in 1:4){
cat("###############","Metodo de clasificacion:", models[i],"#########################")
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_model)
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[i], k = 13)
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme()
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
cor_s<-cbind(cor_s,eval[1])
sil_s<-cbind(sil_s,eval[2])
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[i], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
#UMAP CON CLUSTER POR XY.
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo2$cluster))) +
theme()
cor_xy<-cbind(cor_xy,eval[1])
sil_xy<-cbind(sil_xy,eval[2])
}
resultados<-rbind(models[1:4],cor_s,sil_s,cor_xy,sil_xy)
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
data_model<-data_pp_xy[1:21]
for(i in 1:4){
cat("###############","Metodo de clasificacion:", models[i],"#########################")
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_model)
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[i], k = 13)
eval <- evaluacion_cluster(data_final[36:37], modelo1$cluster)
cor_s<-cbind(cor_s,eval[1])
sil_s<-cbind(sil_s,eval[2])
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[i], k = 13)
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
cor_xy<-cbind(cor_xy,eval[1])
sil_xy<-cbind(sil_xy,eval[2])
}
resultados<-rbind(models[1:4],cor_s,sil_s,cor_xy,sil_xy)
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
resultados
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
eval
evaluacion_cluster <- function(data, clusters){
coefSil <- silhouette(clusters,dist(data))
cohesiones <- clus_cohes(data, clusters)
separaciones <- clus_sep(data, clusters)
correlacion <- clus_cor(data, clusters)
return(list(correlacion, mean(coefSil[,3]), cohesiones, separaciones,coefSil[,3]))
}
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
eval[5]
fviz_silhouette(eval[5]) +
coord_flip()
fviz_silhouette(eval[5]) +
coord_flip()
models <- c("kmeans", "hier", "gmm", "cmeans", "dbscan")
evaluacion_cluster <- function(data, clusters){
coefSil <- silhouette(clusters,dist(data))
cohesiones <- clus_cohes(data, clusters)
separaciones <- clus_sep(data, clusters)
correlacion <- clus_cor(data, clusters)
return(list(correlacion, mean(coefSil[,3]), cohesiones, separaciones,coefSil))
}
coefSil<-eval[5]
fviz_silhouette(coefSil) +
coord_flip()
coefSil
coefSil<-eval[5][1]
coefSil
coefSil<-eval[5][1]
coefSil
fviz_silhouette(coefSil) +
coord_flip()
coefSil <- silhouette(modelo1$cluster,dist(data.umap))
fviz_silhouette(coefSil) +
coord_flip()
cat("Metodo de clasificacion:", models[3])
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_model)
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[3], k = 13)
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
eval
coefSil <- silhouette(modelo1$cluster,dist(data.umap))
fviz_silhouette(coefSil) +
coord_flip()
ggplot(data.umap) +
geom_point(aes(V1,V2, col=factor(modelo1$cluster))) +
theme() + labs(title= "Cluster sin variables de posición")
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme()+labs(title =  "Cluster sin variables de posición")
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme()+labs(title =  "Cluster sin variables de posición",fill="Clusters")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme()+labs(title =  "Cluster sin variables de posición")+
guides(fill = guide_legend(title = "Título"))
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme()+labs(title =  "Cluster sin variables de posición")+
scale_fill_discrete(name = "Título")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title = element_blank())+
labs(title =  "Cluster sin variables de posición",fill="Clusters")+
#CLUSTER POR XY
print("cluster por XY")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title = element_blank())+
labs(title =  "Cluster sin variables de posición",fill="Clusters")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title = element_blank())+
labs(title =  "Cluster sin variables de posición")+
guides(fill = guide_legend(title = "Título"))
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title = "Clusters")+
labs(title =  "Cluster sin variables de posición")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title = "Clusters")+
labs(title =  "Cluster sin variables de posición")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title= "Clusters")+
labs(title =  "Cluster sin variables de posición")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme(legend.title= element_text("Clusters"))+
labs(title =  "Cluster sin variables de posición")
#Cluster sin XY en mapa XY
ggplot(data_pp_xy[22:23]) +
geom_point(aes(X,Y, col=factor(modelo1$cluster))) +
theme()+
labs(title =  "Cluster sin variables de posición",col="Clusters")
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[3], k = 13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()+labs(title= "Cluster por posición")
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
eval
get_clust_tendency(data_pp_xy[22:23], n = 40, graph = FALSE)
cor_s<-c()
sil_s<-c()
cor_xy<-c()
sil_xy<-c()
#data_model<-data_final[1:35]
data_model<-data_pp_xy[1:21]
for(i in 1:4){
cat("###############","Metodo de clasificacion:", models[i],"#########################")
#CLUSTER SIN XY.
print("cluster sin XY")
model.umap <- umap(data_model)
data.umap <-
model.umap$layout %>%
as.data.frame()
modelo1<-clusteriza(data.umap, models[i], k = 13)
eval <- evaluacion_cluster(data.umap, modelo1$cluster)
cor_s<-cbind(cor_s,eval[1])
sil_s<-cbind(sil_s,eval[2])
#CLUSTER POR XY
print("cluster por XY")
modelo2<-clusteriza(data_final[36:37], models[i], k = 13)
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
cor_xy<-cbind(cor_xy,eval[1])
sil_xy<-cbind(sil_xy,eval[2])
}
resultados<-rbind(models[1:4],cor_s,sil_s,cor_xy,sil_xy)
resultados<-cbind(c("metodo","cor_s","sil_s","cor_xy","sil_xy"),resultados)
resultados
print("cluster por XY")
modelo2<-kmeans(data_final[36:37],13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
coefSil <- silhouette(modelo2$cluster,dist(data.umap))
fviz_silhouette(coefSil) +
coord_flip()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
eval
print("cluster por XY")
modelo2<-kmeans(data_final[36:37],13)
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()
coefSil <- silhouette(modelo2$cluster,dist(data_final[36:37]))
fviz_silhouette(coefSil) +
coord_flip()
eval <- evaluacion_cluster(data_final[36:37], modelo2$cluster)
eval
ggplot(data_final[36:37]) +
geom_point(aes(X,Y, col=factor(modelo2$cluster))) +
theme()+labs(title = "Clusters por posición", col="Clusters")
