data<-read.csv(C:\Users\nicov\Desktop\Universidad\Trabajos Universidad Uai\Semestre X\Metodos de aprendizaje de máquinas\github\tareas\msds_AprendizajeMaquinas\Tarea 1\datos_t1_centroides.csv)
data<-read.csv("C:/Users/nicov/Desktop/Universidad/
Trabajos Universidad Uai/Semestre X/Metodos de aprendizaje de máquinas/github/tareas/msds_AprendizajeMaquinas/Tarea 1/datos_t1_centroides.csv",sep=",",header=TRUE)
data<-read.csv("datos_t1_centroides.csv",sep=",",header=TRUE)
View(data)
sum(is.na(data))
1661*41
1980/68101
aply(data,margin=2,fun=sum)
apply(data,margin=2,fun=sum)
apply(data,MARGIN=2,FUN = =sum)
apply(x=is.na(data),MARGIN=2,FUN = =sum)
apply(X=is.na(data),MARGIN=2,FUN = =sum)
apply(X=is.na(data),MARGIN=2,FUN =sum)
apply(X=is.na(data),MARGIN=1,FUN =sum)
apply(X=is.na(data),MARGIN=1,FUN =sum)>0
sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na
Tuplas_na*100/1661
Tuplas_na/1661
Tuplas_na*100/1661
heatmaply::heatmaply_na(data)
#12.5 % de las tuplas tienen nulos.
pacman::p_load(heatmaply)
library(heatmaply)
heatmaply::heatmaply_na(data)
heatmaply::heatmaply_na(data)
heatmaply_na(data)
heatmaply::heatmaply_na(data)
Column_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#11 columnas presentan NA
apply(X=is.na(data),MARGIN=2,FUN =sum
#11 columnas presentan NA
apply(X=is.na(data),MARGIN=2,FUN =sum)
#11 columnas presentan NA
apply(X=is.na(data),MARGIN=2,FUN =sum)
data<-read.csv("datos_t1_centroides.csv",sep=",",header=TRUE)
#Analisis de datos nulos.
sum(is.na(data))
Tuplas_na<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0)
Tuplas_na*100/1661
#12.5 % de las tuplas tienen nulos.
Column_na<-sum(apply(X=is.na(data),MARGIN=2,FUN =sum)>0)
#11 columnas presentan NA
apply(X=is.na(data),MARGIN=2,FUN =sum)
Tuplas_na
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores]
#11 columnas presentan NA
valores<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
apply(X=is.na(data),MARGIN=2,FUN =sum)[valores]
#11 columnas presentan NA
valores_col<-apply(X=is.na(data),MARGIN=2,FUN =sum)>0
apply(X=is.na(data),MARGIN=1,FUN =sum[valores_tu]
valores_tu<-sum(apply(X=is.na(data),MARGIN=1,FUN =sum)>0
valores_tu<-apply(X=is.na(data),MARGIN=1,FUN =sum)>0
apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu]
rownames(data)[valores_tu]
algo<-c(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
algo<-cbind(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
View(algo)
indice_nulos<-cbind(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
View(indice_nulos)
#Filas con su respectivo indice y n°de nulo
indice_nulos<-cbind(rownames(data)[valores_tu],apply(X=is.na(data),MARGIN=1,FUN =sum)[valores_tu])
valores_1<-apply(X=is.na(data),MARGIN=1,FUN =sum)>1
data2<-df[-rownames(data)[valores_1],]
indices_e<-c(rownames(data)[valores_1])
data2<-df[-c(rownames(data)[valores_1]),]
data2<-df[-c(rownames(data)[valores_1]),]
data2<-df[-indices_e,]
data2<-df[!(row.names(df) %in% indices_e),]
indices_e<-c(rownames(data)[valores_1])
data2<-df[!(row.names(df) %in% indices_e),]
data2<-data[!(row.names(df) %in% indices_e),]
data2<-data[-indices_e,]
indices_e<-c(row.names(data)[valores_1])
data2<-data[-indices_e,]
indices_e
data2<-data[!indices_e,]
data2<-data[indices_e,]
indices_e<-c(row.names(data)[!(valores_1)])
indices_e
data2<-data[indices_e,]
View(data2)
apply(X=is.na(data2),MARGIN=2,FUN =sum)
data_final<-data[c(row.names(data)[!(valores_tu)])]
data_final<-data[c(row.names(data)[!(valores_tu)]),]
View(data_final)
apply(X=is.na(data_final),MARGIN=2,FUN =sum)
cor(data_final, method= "pearson")
cor(data_final, method= "pearson")
summary(data_final[comuna], method= "pearson")
summary(data_final["comuna"], method= "pearson")
summary(data_final["comuna"])
summary(data_final["COMUNA"])
summary(data_final$COMUNA)
data_final$COMUNA
count(data_final$COMUNA)
pacman::p_load(dplyr)
count(data_final$COMUNA)
data_final$COMUNA %>% count()
#X1., cod_com, COMUNA, MANZ_EN.
data_final$COMUNA %>% group_by(a, b) %>% summarise(n = n()). count()
#X1., cod_com, COMUNA, MANZ_EN.
data_final %>% COUNT(COMUNA)
#X1., cod_com, COMUNA, MANZ_EN.
data_final %>% count(COMUNA)
data_final %>% count(COMUNA)
data_final %>% count(cod_com)
data_final %>% count(MANZ_EN)
data_final<-data_final(-c("COMUNA","cod_com","MANZ_EN"),)
data_final<-data_final[-c("COMUNA","cod_com","MANZ_EN"),]
data_final$X.1<-NULL
data_final$COMUNA<-NULL
data_final$cod_com<-NULL
data_final$MANZ_EN<-NULL
cor(data_final,method="pearson")
corplot(data_final,method="pearson")
pacman::p_load(dplyr,psych)
corplot(data_final,cex=1.2,main="Correlaciones")
corPlot(data_final,cex=1.2,main="Correlaciones")
corPlot(data_final,main="Correlaciones")
?corPlot
corPlot(data_final,cex=0.5,main="Correlaciones")
corPlot(data_final,cex=0.5,main="Correlaciones")
corPlot(data_final,cex=0.5,main="Correlaciones",method="number")
cor(data_final, method="Pearson")[cor(data_final, method="Pearson")>0.5]
cor(data_final, method="pearson")[cor(data_final, method="pearson")>0.5]
cor(data_final, method="pearson")[cor(data_final, method="pearson")>0.75]
corPlot(data_final)[cor(data_final, method="pearson")>0.75]
plot(cor(data_final, method="pearson")[cor(data_final, method="pearson")>0.75])
cor(data_final, method="pearson")[cor(data_final, method="pearson")>0.75]
cor(data_final, method="pearson")>0.75
